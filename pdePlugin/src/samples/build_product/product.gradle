//Gradle 0.9-rc-1
//Command Example: gradle pdeClean pdeBuild -i -S

apply plugin: 'ProductPde'
defaultTasks 'pdeClean', 'pdeUpload'

buildscript { 
    repositories { 
		flatDir(dirs: "../../../build/libs")
	} 
    dependencies {
        classpath ':pdePlugin:7.+' 
    }
}

configure(ProductPde){	

    /* the working directory
     * all plugins and features source code will be fetched here */
    buildDirectory = "${rootDir}/work"

    /* all artifacts produced by the PDE build will be unziped here */
    //publishDirectory = "${buildDirectory}/publish"
    
    /* enter here all the feature ids that you want to build.
     * the Feature directory name must match the feature ID in feature.xml */
    productFile = "${rootDir}/plugins/ProductOnPluginsExample/simplemailproduct.product"
    
    /* the list of directories containing plugins */
    pluginsSrcDirList = ["plugins"]
    /* the list of directories containing features */
    featuresSrcDirList = []

    /* timestamp for the build artifacts. this will also be the name of the 
     * output folder for all archives that the build will produce. */
    buildId = "20101124-0845"

    /* the target platform to use to build the features (the $base folder MUST contain an "eclipse" folder) */
    base = "R:/platform/desk/3.3"
    
    /* use .link files instead of the -DpluginPath variable (default is false) */
    usePreviousLinks = true

    /* extension locations for the target platform.
     * - if building with eclipse 3.5 (usePreviousLinks = false) 
     *   these values will be passed as the -DpluginPath variable separated by path separators 
     * - if building with eclipse 3.3 (usePreviousLinks = true)
     *   these values will end up in .link files in the target platform */
    extLocations = ["ext/loc/1", "ext/loc/2", "ext/loc/3"]

    /* if paths provided in extLocations are not absolute, gradle will append them to this parameter */
    eclipseExtensionsRoot = "R:/"

    /* folder containing existing .link files (extLocations will be ignored) */
    //linksSrcDirectory = "/path/to/links/dir"

    /* the eclipse runtime that will execute the build.
     * this location must contain a plugins folder with the PDE plugin in it
     * the PDE bundle is a folder named : org.eclipse.pde.build_${pdeBuildPluginVersion} */
    eclipseLauncher = "R:/launcher/3.5-basebuilder"

    /* equinox eclipse launcher to use for launching the org.eclipse.ant.core.antRunner application */
    //equinoxLauncherPluginVersion = "1.0.201.R35x_v20090715"
    /* here you can specify the PDE plugin version to use */
    //pdeBuildPluginVersion = "3.5.1.R35x_20090820"
    /* NOTE: if you don't specify versions for equinox and PDE, gradle will use non versioned plugins */

    /* additional properties to pass directly as arguments to the PDE command line
     * the arguments will have the form : -Darg=value */
    //additionalProperties = ["arg1" : "value1", "arg2", "value2"]

    /* custom build.properties file to use instead of the embedded one */
    //buildPropertiesFile ="mybuild.properties"

    /* options to pass to the java VM used for the build process */
    //jvmOptions = "-Xms128m -Xmx512m -XX:MaxPermSize=256m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled"
}
